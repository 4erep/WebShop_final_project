plugins {
    id 'java'
    id 'io.qameta.allure' version '2.8.1'
}


version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url = "https://dl.bintray.com/qameta/maven-unstable/" }
}

def allureVersion = "2.13.8",
    restassuredVersion = "4.3.3",
    selenideVersion = "5.20.1",
    junitVersion = "5.7.1",
    allureJunitPlatform = "3.28.2",
    aspectjVersion = "1.9.6",
    ownerVersion = "1.0.12",
    jacksonVersion = "2.12.2"

allure {
    version = "$allureVersion"
    autoconfigure = true
    aspectjweaver = true
    useJUnit5 {
        version = "$allureVersion"
    }
}

dependencies {
    testImplementation(
            "org.aspectj:aspectjweaver:$aspectjVersion",
            "org.junit.jupiter:junit-jupiter-api:$junitVersion",
            "io.rest-assured:rest-assured:$restassuredVersion",
            "io.qameta.allure:allure-java-commons:$allureVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.qameta.allure:allure-ee-junit-platform:$allureJunitPlatform",
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            "com.codeborne:selenide:$selenideVersion",
            "org.aeonbits.owner:owner:$ownerVersion"
    )
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion", "org.slf4j:slf4j-simple:1.7.30")
}

compileTestJava {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties += System.properties
    System.setProperty("junit.jupiter.extensions.autodetection.enabled", "true")

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
            events "started", "failed"
//            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

test {
    useJUnitPlatform()
    systemProperties(System.getProperties())
}

task ui(type: Test) {
    useJUnitPlatform {
        includeTags 'UI'
        systemProperties(System.getProperties())
    }
}

task api(type: Test) {
    useJUnitPlatform {
        includeTags 'API'
        systemProperties(System.getProperties())
    }
}
